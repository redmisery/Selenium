pytest参数化依赖配置

独立依赖：
独立执行所有参数化的数据，只有当前函数数据执行完毕才执行下一个测试函数，依赖顺序取决于测试函数名
执行顺序举例：test_a、test_b
# 无依赖
def test_a(self,data):
    # data_sum=3
    # 测试数据data[0]
    # 测试数据data[1]
    # 测试数据data[3]

# 依赖test_a
def test_b(self,data):
    # data_sum=2
    # 测试数据data[0]
    # 测试数据data[1]

连续依赖：
连续执行每个测试函数的某一条数据，执行了一条数据后立刻执行下一个测试函数，依赖顺序取决于测试函数名和测试数据数量
开启全局测试轮次round
开启数据循环，默认开启，cycle_data=True
执行顺序举例：test_a、test_b
round=0
# 取决于测试函数中测试数据最多的函数
round_max=3
round<round_max
# 开启数据循环:
cycle_data=True
index=round%data_sum

# 无依赖
def test_a(self,data):
    # data_sum=3
    # index=round%data_sum=0%3=0
    # 测试数据data[index]=测试数据0

# 依赖test_a数据round=0
def test_b(self,data):
    # data_sum=2
    # index=round%data_sum=0%2=0
    # 测试数据data[index]=测试数据0

round=1

# 无依赖
def test_a(self,data):
    # data_sum=3
    # index=round%data_sum=1%3=1
    # 测试数据data[index]=测试数据1

# 依赖test_a数据round=1
def test_b(self,data):
    # data_sum=2
    # index=round%data_sum=1%2=1
    # 测试数据data[index]=测试数据1

round=2

# 无依赖
def test_a(self,data):
    # data_sum=3
    # index=round%data_sum=1%3=2
    # 测试数据data[index]=测试数据2

# 依赖test_a数据round=2
def test_b(self,data):
    # data_sum=2
    # index=round%data_sum=1%2=0
    # 测试数据data[index]=测试数据0

执行顺序举例：test_a、test_b
round=0
# 取决于测试函数中测试数据最多的函数
round_max=3
round<round_max
# 不开启数据循环
cycle_data=False
index=round

# 无依赖
def test_a(self,data):
    # data_sum=3
    # index=round=0
    # 测试数据data[index]=测试数据0

# 依赖test_a数据round=0
def test_b(self,data):
    # data_sum=2
    # index=round=0
    # 测试数据data[index]=测试数据0

round=1

# 无依赖
def test_a(self,data):
    # data_sum=3
    # index=round=1
    # 测试数据data[index]=测试数据1

# 依赖test_a数据round=1
def test_b(self,data):
    # data_sum=2
    # index=round=1
    # 测试数据data[index]=测试数据1

round=2

# 无依赖
def test_a(self,data):
    # data_sum=3
    # index=round=2
    # 测试数据data[index]=测试数据2

# 依赖test_a数据round=2
def test_b(self,data):
    # data_sum=2
    # 由于index=2,超出数据范围，不执行测试函数test_b
    # pass